%{
    #include <iostream>
    using namespace std;
    using output::printProductionRule;
    using output::errorLex;
    using output::errorSyn;

    #define YYSTYPE int
    extern int yylineno;
    extern char* yytext;
    extern size_t yyleng;
    int yylex();
    void yyerror(const char*);
%}

%start prog
%nonassoc IF ELSE
%token INT BYTE B BOOL TRUE FALSE RETURN BREAK CONTINUE WHILE SC ID NUM STRING LBRACE RBRACE
%left EQ NEQ GT GTE LT LTE
%left ADD SUB
%left MUL DIV 
%left AND 
%left OR
%right LPAREN RPAREN ASSIGN NOT 

%%

prog: stmts { printProductionRule(1); };

stmts: stmt { printProductionRule(2); } | stmts stmt { printProductionRule(3); }; 

stmt:
    LBRACE stmts RBRACE { printProductionRule(4); } |
    type ID SC { printProductionRule(5); } |
    type ID ASSIGN expr SC { printProductionRule(6); } |
    ID ASSIGN expr SC { printProductionRule(7); } |
    call SC { printProductionRule(8); } |
    RETURN SC { printProductionRule(9); } |
    IF LPAREN expr RPAREN stmt { printProductionRule(10); } |
    IF LPAREN expr RPAREN stmt ELSE stmt { printProductionRule(11); } |
    WHILE LPAREN expr RPAREN stmt { printProductionRule(12); } |
    BREAK SC { printProductionRule(13); } |
    CONTINUE SC { printProductionRule(14); };

call: ID LPAREN expr RPAREN { printProductionRule(15); };

type: INT { printProductionRule(16); } | BYTE {printProductionRule(17); } | BOOL { printProductionRule(18); };

relop: EQ | NEQ | GT | GTE | LT | LTE;

binop: ADD | SUB | MUL | DIV;

expr:
    LPAREN expr RPAREN { printProductionRule(19); } |
    expr binop expr { printProductionRule(20); } |
    ID { printProductionRule(21); } |
    call { printProductionRule(22); } |
    NUM { printProductionRule(23); } |
    NUM B { printProductionRule(24); } |
    STRING { printProductionRule(25); } |
    TRUE { printProductionRule(26); } |
    FALSE { printProductionRule(27); } |
    NOT expr { printProductionRule(28); } |
    expr AND expr { printProductionRule(29); } |
    expr OR expr { printProductionRule(30); } |
    expr relop expr { printProductionRule(31); } |
    LPAREN type RPAREN expr { printProductionRule(32); };
%%

void yyerror() {
    errorSyn(yylineno);
    exit(0);
}

int main() {
    return yyparse();
}