%{
    #include <iostream>
    #include "node.hpp"
    using namespace std;

    #define YYSTYPE Node*
    int yylex();
    void yyerror(const char*);
%}

%union{
    Node *node;
    NExpression *expr;
    NStatement *stmt;
    NIdentifier *ident;
    NCall *ncall;
    int token;
    std::string string;
    std::vector<NExpression*> *exprlist;
    std::vector<NStatement*> *stmtlist;
}

%start prot
%type type binop
%type <stmtlist> stmts
%type <stmt> stmt
%type <expr> expr
%type <ncall> call
%token INT BYTE B BOOL TRUE FALSE RETURN BREAK CONTINUE IF ELSE WHILE SC ID NUM STRING LBRACE RBRACE
%left EQ, NEQ, GT, GTE, LT, LTE
%left ADD SUB
%left MUL DIV AND OR
%right LPAREN RPAREN ASSIGN NOT 

%%

prog: stmts {};

stmts: stmt { $$ = $1; } | stmt stmts {};

stmt:
    LBRACE stmts RBRACE {} |
    type ID SC {} |
    type ID ASSIGN expr SC {} |
    ID ASSIGN expr SC {} |
    call SC {} |
    RETURN SC {} |
    IF LPAREN expr RPAREN stmt {} |
    IF LPAREN expr RPAREN stmt ELSE stmt {} |
    WHILE LPAREN expr RPAREN stmt {} |
    BREAK SC {} |
    CONTINUE SC {};

call: ID LPAREN expr RPAREN { $$ = new NCall($1, $3);};

type: INT {} | BYTE {} | BOOL {};

binop: EQ | NEQ | GT | GTE | LT | LTE;

relop: ADD | SUB | MUL | DIV;

expr:
    LPAREN expr RPAREN {} |
    expr binop expr {} |
    ID {} |
    call {} |
    NUM {} |
    NUM B {} |
    STRING {} |
    TRUE {} |
    FALSE {} |
    NOT expr {} |
    expr AND expr {} |
    expr OR expr {} |
    expr relop expr {} |
    LPAREN type RPAREN expr {};
%%